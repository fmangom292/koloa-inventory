// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  code           String   // Código PIN de 4 dígitos
  role           String   @default("user") // "admin" o "user"
  failedAttempts Int      @default(0)
  blocked        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relación con pedidos
  orders         Order[]
  // Sin relación con logs - mantenemos histórico independiente

  @@unique([code])
}

model InventoryItem {
  id        Int      @id @default(autoincrement())
  tipo      String   // "Tabaco" o "Producto"
  marca     String
  nombre    String
  peso      Int      // Peso en gramos
  stock     Int      // Cantidad actual en stock
  minStock  Int      @default(0) // Stock mínimo para alertas
  precio    Float    @default(0) // Precio del producto
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relación con items de pedidos
  orderItems OrderItem[]
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique // ej: "ORD-2025-001"
  type        String      // "general" o "brand"
  brand       String?     // null si es general, nombre de la marca si es específico
  status      String      @default("pending") // "pending", "partial", "completed", "cancelled"
  totalItems  Int         // total de unidades pedidas
  totalPrice  Float       // precio total estimado
  createdAt   DateTime    @default(now())
  completedAt DateTime?   // fecha cuando se marcó como completado
  notes       String?     // notas adicionales del pedido
  
  // Relaciones
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id                Int           @id @default(autoincrement())
  orderId           Int
  inventoryItemId   Int
  quantityOrdered   Int           // cantidad pedida
  quantityReceived  Int           @default(0) // cantidad recibida
  priceAtTime       Float         // precio del producto cuando se hizo el pedido
  status            String        @default("pending") // "pending", "partial", "completed"
  receivedAt        DateTime?     // fecha cuando se recibió (totalmente)
  notes             String?       // notas específicas del item
  
  // Relaciones
  order             Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  inventoryItem     InventoryItem @relation(fields: [inventoryItemId], references: [id])
  
  @@unique([orderId, inventoryItemId]) // Un producto por pedido
}

model ApiLog {
  id          Int      @id @default(autoincrement())
  userId      Int?     // ID del usuario que realizó la acción (histórico)
  userName    String?  // Nombre del usuario (guardado para histórico)
  userCode    String?  // Código del usuario (guardado para histórico)
  userRole    String?  // Rol del usuario en el momento de la acción
  method      String   // GET, POST, PUT, DELETE
  endpoint    String   // Ruta de la API (/api/inventory, /api/auth/login, etc.)
  statusCode  Int      // Código de respuesta HTTP
  ipAddress   String?  // IP del cliente
  userAgent   String?  // Información del navegador
  requestBody String?  // Cuerpo de la petición (JSON serializado)
  responseTime Int     // Tiempo de respuesta en milisegundos
  errorMessage String? // Mensaje de error si la petición falló
  timestamp   DateTime @default(now())
  
  // Sin relaciones - datos históricos independientes
}